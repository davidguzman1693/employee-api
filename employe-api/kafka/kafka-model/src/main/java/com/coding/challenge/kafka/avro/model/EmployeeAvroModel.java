/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.coding.challenge.kafka.avro.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class EmployeeAvroModel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4075468023114801128L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EmployeeAvroModel\",\"namespace\":\"com.coding.challenge.kafka.avro.model\",\"fields\":[{\"name\":\"uuid\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"email\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"fullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"birthday\",\"type\":[\"null\",\"long\"],\"logicalType\":[\"null\",\"date\"]},{\"name\":\"hobbies\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"HobbyAvroModel\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EmployeeAvroModel> ENCODER =
      new BinaryMessageEncoder<EmployeeAvroModel>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EmployeeAvroModel> DECODER =
      new BinaryMessageDecoder<EmployeeAvroModel>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<EmployeeAvroModel> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<EmployeeAvroModel> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<EmployeeAvroModel> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<EmployeeAvroModel>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this EmployeeAvroModel to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a EmployeeAvroModel from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a EmployeeAvroModel instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static EmployeeAvroModel fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String uuid;
   private java.lang.String email;
   private java.lang.String fullName;
   private java.lang.Long birthday;
   private java.util.List<com.coding.challenge.kafka.avro.model.HobbyAvroModel> hobbies;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EmployeeAvroModel() {}

  /**
   * All-args constructor.
   * @param uuid The new value for uuid
   * @param email The new value for email
   * @param fullName The new value for fullName
   * @param birthday The new value for birthday
   * @param hobbies The new value for hobbies
   */
  public EmployeeAvroModel(java.lang.String uuid, java.lang.String email, java.lang.String fullName, java.lang.Long birthday, java.util.List<com.coding.challenge.kafka.avro.model.HobbyAvroModel> hobbies) {
    this.uuid = uuid;
    this.email = email;
    this.fullName = fullName;
    this.birthday = birthday;
    this.hobbies = hobbies;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uuid;
    case 1: return email;
    case 2: return fullName;
    case 3: return birthday;
    case 4: return hobbies;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uuid = value$ != null ? value$.toString() : null; break;
    case 1: email = value$ != null ? value$.toString() : null; break;
    case 2: fullName = value$ != null ? value$.toString() : null; break;
    case 3: birthday = (java.lang.Long)value$; break;
    case 4: hobbies = (java.util.List<com.coding.challenge.kafka.avro.model.HobbyAvroModel>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'uuid' field.
   * @return The value of the 'uuid' field.
   */
  public java.lang.String getUuid() {
    return uuid;
  }


  /**
   * Sets the value of the 'uuid' field.
   * @param value the value to set.
   */
  public void setUuid(java.lang.String value) {
    this.uuid = value;
  }

  /**
   * Gets the value of the 'email' field.
   * @return The value of the 'email' field.
   */
  public java.lang.String getEmail() {
    return email;
  }


  /**
   * Sets the value of the 'email' field.
   * @param value the value to set.
   */
  public void setEmail(java.lang.String value) {
    this.email = value;
  }

  /**
   * Gets the value of the 'fullName' field.
   * @return The value of the 'fullName' field.
   */
  public java.lang.String getFullName() {
    return fullName;
  }


  /**
   * Sets the value of the 'fullName' field.
   * @param value the value to set.
   */
  public void setFullName(java.lang.String value) {
    this.fullName = value;
  }

  /**
   * Gets the value of the 'birthday' field.
   * @return The value of the 'birthday' field.
   */
  public java.lang.Long getBirthday() {
    return birthday;
  }


  /**
   * Sets the value of the 'birthday' field.
   * @param value the value to set.
   */
  public void setBirthday(java.lang.Long value) {
    this.birthday = value;
  }

  /**
   * Gets the value of the 'hobbies' field.
   * @return The value of the 'hobbies' field.
   */
  public java.util.List<com.coding.challenge.kafka.avro.model.HobbyAvroModel> getHobbies() {
    return hobbies;
  }


  /**
   * Sets the value of the 'hobbies' field.
   * @param value the value to set.
   */
  public void setHobbies(java.util.List<com.coding.challenge.kafka.avro.model.HobbyAvroModel> value) {
    this.hobbies = value;
  }

  /**
   * Creates a new EmployeeAvroModel RecordBuilder.
   * @return A new EmployeeAvroModel RecordBuilder
   */
  public static com.coding.challenge.kafka.avro.model.EmployeeAvroModel.Builder newBuilder() {
    return new com.coding.challenge.kafka.avro.model.EmployeeAvroModel.Builder();
  }

  /**
   * Creates a new EmployeeAvroModel RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EmployeeAvroModel RecordBuilder
   */
  public static com.coding.challenge.kafka.avro.model.EmployeeAvroModel.Builder newBuilder(com.coding.challenge.kafka.avro.model.EmployeeAvroModel.Builder other) {
    if (other == null) {
      return new com.coding.challenge.kafka.avro.model.EmployeeAvroModel.Builder();
    } else {
      return new com.coding.challenge.kafka.avro.model.EmployeeAvroModel.Builder(other);
    }
  }

  /**
   * Creates a new EmployeeAvroModel RecordBuilder by copying an existing EmployeeAvroModel instance.
   * @param other The existing instance to copy.
   * @return A new EmployeeAvroModel RecordBuilder
   */
  public static com.coding.challenge.kafka.avro.model.EmployeeAvroModel.Builder newBuilder(com.coding.challenge.kafka.avro.model.EmployeeAvroModel other) {
    if (other == null) {
      return new com.coding.challenge.kafka.avro.model.EmployeeAvroModel.Builder();
    } else {
      return new com.coding.challenge.kafka.avro.model.EmployeeAvroModel.Builder(other);
    }
  }

  /**
   * RecordBuilder for EmployeeAvroModel instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EmployeeAvroModel>
    implements org.apache.avro.data.RecordBuilder<EmployeeAvroModel> {

    private java.lang.String uuid;
    private java.lang.String email;
    private java.lang.String fullName;
    private java.lang.Long birthday;
    private java.util.List<com.coding.challenge.kafka.avro.model.HobbyAvroModel> hobbies;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.coding.challenge.kafka.avro.model.EmployeeAvroModel.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.email)) {
        this.email = data().deepCopy(fields()[1].schema(), other.email);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.fullName)) {
        this.fullName = data().deepCopy(fields()[2].schema(), other.fullName);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.birthday)) {
        this.birthday = data().deepCopy(fields()[3].schema(), other.birthday);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.hobbies)) {
        this.hobbies = data().deepCopy(fields()[4].schema(), other.hobbies);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing EmployeeAvroModel instance
     * @param other The existing instance to copy.
     */
    private Builder(com.coding.challenge.kafka.avro.model.EmployeeAvroModel other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.email)) {
        this.email = data().deepCopy(fields()[1].schema(), other.email);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.fullName)) {
        this.fullName = data().deepCopy(fields()[2].schema(), other.fullName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.birthday)) {
        this.birthday = data().deepCopy(fields()[3].schema(), other.birthday);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.hobbies)) {
        this.hobbies = data().deepCopy(fields()[4].schema(), other.hobbies);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'uuid' field.
      * @return The value.
      */
    public java.lang.String getUuid() {
      return uuid;
    }


    /**
      * Sets the value of the 'uuid' field.
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public com.coding.challenge.kafka.avro.model.EmployeeAvroModel.Builder setUuid(java.lang.String value) {
      validate(fields()[0], value);
      this.uuid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uuid' field.
      * @return This builder.
      */
    public com.coding.challenge.kafka.avro.model.EmployeeAvroModel.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'email' field.
      * @return The value.
      */
    public java.lang.String getEmail() {
      return email;
    }


    /**
      * Sets the value of the 'email' field.
      * @param value The value of 'email'.
      * @return This builder.
      */
    public com.coding.challenge.kafka.avro.model.EmployeeAvroModel.Builder setEmail(java.lang.String value) {
      validate(fields()[1], value);
      this.email = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'email' field has been set.
      * @return True if the 'email' field has been set, false otherwise.
      */
    public boolean hasEmail() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'email' field.
      * @return This builder.
      */
    public com.coding.challenge.kafka.avro.model.EmployeeAvroModel.Builder clearEmail() {
      email = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'fullName' field.
      * @return The value.
      */
    public java.lang.String getFullName() {
      return fullName;
    }


    /**
      * Sets the value of the 'fullName' field.
      * @param value The value of 'fullName'.
      * @return This builder.
      */
    public com.coding.challenge.kafka.avro.model.EmployeeAvroModel.Builder setFullName(java.lang.String value) {
      validate(fields()[2], value);
      this.fullName = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'fullName' field has been set.
      * @return True if the 'fullName' field has been set, false otherwise.
      */
    public boolean hasFullName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'fullName' field.
      * @return This builder.
      */
    public com.coding.challenge.kafka.avro.model.EmployeeAvroModel.Builder clearFullName() {
      fullName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'birthday' field.
      * @return The value.
      */
    public java.lang.Long getBirthday() {
      return birthday;
    }


    /**
      * Sets the value of the 'birthday' field.
      * @param value The value of 'birthday'.
      * @return This builder.
      */
    public com.coding.challenge.kafka.avro.model.EmployeeAvroModel.Builder setBirthday(java.lang.Long value) {
      validate(fields()[3], value);
      this.birthday = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'birthday' field has been set.
      * @return True if the 'birthday' field has been set, false otherwise.
      */
    public boolean hasBirthday() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'birthday' field.
      * @return This builder.
      */
    public com.coding.challenge.kafka.avro.model.EmployeeAvroModel.Builder clearBirthday() {
      birthday = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'hobbies' field.
      * @return The value.
      */
    public java.util.List<com.coding.challenge.kafka.avro.model.HobbyAvroModel> getHobbies() {
      return hobbies;
    }


    /**
      * Sets the value of the 'hobbies' field.
      * @param value The value of 'hobbies'.
      * @return This builder.
      */
    public com.coding.challenge.kafka.avro.model.EmployeeAvroModel.Builder setHobbies(java.util.List<com.coding.challenge.kafka.avro.model.HobbyAvroModel> value) {
      validate(fields()[4], value);
      this.hobbies = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'hobbies' field has been set.
      * @return True if the 'hobbies' field has been set, false otherwise.
      */
    public boolean hasHobbies() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'hobbies' field.
      * @return This builder.
      */
    public com.coding.challenge.kafka.avro.model.EmployeeAvroModel.Builder clearHobbies() {
      hobbies = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EmployeeAvroModel build() {
      try {
        EmployeeAvroModel record = new EmployeeAvroModel();
        record.uuid = fieldSetFlags()[0] ? this.uuid : (java.lang.String) defaultValue(fields()[0]);
        record.email = fieldSetFlags()[1] ? this.email : (java.lang.String) defaultValue(fields()[1]);
        record.fullName = fieldSetFlags()[2] ? this.fullName : (java.lang.String) defaultValue(fields()[2]);
        record.birthday = fieldSetFlags()[3] ? this.birthday : (java.lang.Long) defaultValue(fields()[3]);
        record.hobbies = fieldSetFlags()[4] ? this.hobbies : (java.util.List<com.coding.challenge.kafka.avro.model.HobbyAvroModel>) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EmployeeAvroModel>
    WRITER$ = (org.apache.avro.io.DatumWriter<EmployeeAvroModel>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EmployeeAvroModel>
    READER$ = (org.apache.avro.io.DatumReader<EmployeeAvroModel>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.uuid);

    out.writeString(this.email);

    out.writeString(this.fullName);

    if (this.birthday == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.birthday);
    }

    if (this.hobbies == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.hobbies.size();
      out.writeArrayStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (com.coding.challenge.kafka.avro.model.HobbyAvroModel e0: this.hobbies) {
        actualSize0++;
        out.startItem();
        e0.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize0 != size0)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.uuid = in.readString();

      this.email = in.readString();

      this.fullName = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.birthday = null;
      } else {
        this.birthday = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.hobbies = null;
      } else {
        long size0 = in.readArrayStart();
        java.util.List<com.coding.challenge.kafka.avro.model.HobbyAvroModel> a0 = this.hobbies;
        if (a0 == null) {
          a0 = new SpecificData.Array<com.coding.challenge.kafka.avro.model.HobbyAvroModel>((int)size0, SCHEMA$.getField("hobbies").schema().getTypes().get(1));
          this.hobbies = a0;
        } else a0.clear();
        SpecificData.Array<com.coding.challenge.kafka.avro.model.HobbyAvroModel> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.coding.challenge.kafka.avro.model.HobbyAvroModel>)a0 : null);
        for ( ; 0 < size0; size0 = in.arrayNext()) {
          for ( ; size0 != 0; size0--) {
            com.coding.challenge.kafka.avro.model.HobbyAvroModel e0 = (ga0 != null ? ga0.peek() : null);
            if (e0 == null) {
              e0 = new com.coding.challenge.kafka.avro.model.HobbyAvroModel();
            }
            e0.customDecode(in);
            a0.add(e0);
          }
        }
      }

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.uuid = in.readString();
          break;

        case 1:
          this.email = in.readString();
          break;

        case 2:
          this.fullName = in.readString();
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.birthday = null;
          } else {
            this.birthday = in.readLong();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.hobbies = null;
          } else {
            long size0 = in.readArrayStart();
            java.util.List<com.coding.challenge.kafka.avro.model.HobbyAvroModel> a0 = this.hobbies;
            if (a0 == null) {
              a0 = new SpecificData.Array<com.coding.challenge.kafka.avro.model.HobbyAvroModel>((int)size0, SCHEMA$.getField("hobbies").schema().getTypes().get(1));
              this.hobbies = a0;
            } else a0.clear();
            SpecificData.Array<com.coding.challenge.kafka.avro.model.HobbyAvroModel> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.coding.challenge.kafka.avro.model.HobbyAvroModel>)a0 : null);
            for ( ; 0 < size0; size0 = in.arrayNext()) {
              for ( ; size0 != 0; size0--) {
                com.coding.challenge.kafka.avro.model.HobbyAvroModel e0 = (ga0 != null ? ga0.peek() : null);
                if (e0 == null) {
                  e0 = new com.coding.challenge.kafka.avro.model.HobbyAvroModel();
                }
                e0.customDecode(in);
                a0.add(e0);
              }
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










